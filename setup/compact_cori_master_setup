#!/bin/bash
#
# compact_cori_master_setup: set up the master node in the Compact Cori cluster
#
# Author: Nicholas Fong
#         Lawrence Berkeley National Laboratory
#         National Energy Research Scientific Computing Center
#
# Usage:  compact_cori_master_setup -u username -n num_nodes
#
# Acknowledgment:
#         This work was supported by the Director, Office of Science,
#         Division of Mathematical, Information, and Computational
#         Sciences of the U.S. Department of Energy under contract
#         DE-AC02-05CH11231.
#
#         This research used resources of the National Energy Research
#         Scientific Computing Center, which is supported by the Office
#         of Science of the U.S. Department of Energy.
#
# Update History:
# YYYY-MM-DD INITIALS - DESCRIPTION
# *****************************************************************************
# 2015-06-19 NF       - Wrote initial script
# 2015-06-23 NF       - Added pdsh and root SSH key transfer
# 2015-06-24 NF       - Minor bugfixes and greater verbosity
# 2015-06-26 NF       - Fix sed commands for sshd config
# 2015-06-30 NF       - Add chown
# 2015-07-01 NF       - Add apt proxying

PROG=$(basename $0)

error() {
    echo -e "ERROR: $*" >&2
    exit 1
}

usage() {
    echo "USAGE: $PROG -u username -n num_nodes"
}

while getopts "hn:u:p:" OPTION; do
    case $OPTION in
        h)
            usage
            exit 0
            ;;
        n)
            num_nodes="$OPTARG"
            ;;
        u)
            user_name="$OPTARG"
            ;;
    esac
done

# Argument Sanitation
re='^[0-9]+$'
if ! [[ $num_nodes =~ $re ]]; then
    error "Invalid argument: please enter an integer after the -n flag" && usage
fi

if [[ -z $user_name ]]; then
    error "Username is a required argument" && usage
fi

echo "Enter the passphrase for $user_name followed by [return]:"
read pass_phrase

if [[ -z $pass_phrase ]]; then
    error "Please enter the password for $user_name when prompted.  Aborting." && usage
fi

echo -n "Setting up apt-cacher-ng..."
apt-get -y --force-yes install apt-cacher-ng

echo "Removing ~/mpihostsfile"
rm -f /home/$user_name/mpihostsfile
echo "Removing ~/.ssh/authorized_keys"
rm -f /home/$user_name/.ssh/authorized_keys

echo "Generating /home/$user_name/mpihostsfile"
echo "Generating /home/$user_name/.ssh/authorized_keys"
echo "Updating /etc/hosts"

sed -i '/10.0.0.*/d' /etc/hosts

echo -n "Setting up root SSH key... "
ssh-keygen -N '' -b 8192 -f /root/.ssh/id_rsa
echo "Done"

for (( i=1; i<=$num_nodes; i++ )); do
    node_name="CompactCori$i"
    num=$(($i+100))
    ip=10.0.0.$num
    echo -n "Adding $node_name to mpihostsfile and /etc/hosts... "
    echo "$ip" >> /home/$user_name/mpihostsfile
    echo "$ip  CompactCori$i" >> /etc/hosts
    echo "Done"

    echo -n "Getting remote public key and adding to authorized keys... "
    sshpass -p "$pass_phrase" scp -o StrictHostKeyChecking=no $user_name@$node_name:~/.ssh/id_rsa.pub tmp_key
    cat tmp_key >> /home/$user_name/.ssh/authorized_keys
    chown $user_name:$user_name /home/$user_name/.ssh/authorized_keys
    echo "Done"
done

for (( i=2; i<=$num_nodes; i++ )); do
    node_name="CompactCori$i"
    echo -n "Copying authorized_keys to $node_name... "
    sshpass -p "$pass_phrase" scp -o StrictHostKeyChecking=no /home/$user_name/.ssh/authorized_keys $user_name@$node_name:~/.ssh/authorized_keys
    echo "Done"

#echo "Enter the root passphrase followed by [return]:"
#read root_pass_phrase
#
#if [[ -z $root_pass_phrase ]]; then
#    error "Please enter the root password when prompted.  Aborting."
#fi
#    echo "Copying root SSH key to $node_name..."
#    sshpass -p "$root_pass_phrase" scp -o StrictHostKeyChecking=no /root/.ssh/id_rsa.pub root@$node_name:/root/.ssh/authorized_keys
done

chown $user_name:$user_name /home/$user_name/mpihostsfile
rm tmp_key

echo "Done"

echo -n "Hardening sshd config... "

# Ensure Public Key Auth is enabled
sed "s/PubkeyAuthentication yes/PubkeyAuthentication no/" /etc/ssh/sshd_config

# Disallow root SSH logins
sed "s/PermitRootLogin yes/PermitRootLogin no/" /etc/ssh/sshd_config

# Disallow keyboard-interactive logins
sed "s/PasswordAuthentication yes/PasswordAuthentication no/" /etc/ssh/sshd_config

echo "Done"

echo -n "Setting up pdsh... "
rm -f /etc/profile.d/pdsh.sh
echo "export PDSH_RCMD_TYPE='ssh'" >> /etc/profile.d/pdsh.sh
echo "export WCOLL='/etc/pdsh/machines'" >> /etc/profile.d/pdsh.sh

rm -f /etc/pdsh/machines
for (( i=2; i<=$num_nodes; i++ )); do
    echo "CompactCori$i" >> /etc/pdsh/machines
done

echo "Done"

echo "Sleeping for 10 seconds and then rebooting: ^C to postpone reboot... "
sleep 10
shutdown -r now
