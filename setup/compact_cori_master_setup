#!/bin/bash
#
# compact_cori_master_setup: set up the master node in the Compact Cori cluster
#
# Author: Nicholas Fong
#         Lawrence Berkeley National Laboratory
#         National Energy Research Scientific Computing Center
#
# Usage:  compact_cori_master_setup -u username -p passphrase -n num_nodesber
#
# Acknowledgment:
#         This work was supported by the Director, Office of Science,
#         Division of Mathematical, Information, and Computational
#         Sciences of the U.S. Department of Energy under contract
#         DE-AC02-05CH11231.
#
#         This research used resources of the National Energy Research
#         Scientific Computing Center, which is supported by the Office
#         of Science of the U.S. Department of Energy.
#
# Update History:
# YYYY-MM-DD INITIALS - DESCRIPTION
# *****************************************************************************
# 2015-06-19 NF       - Wrote initial script

PROG=$(basename $0)

error() {
    echo -e "ERROR: $*" >&2
    exit 1
}

usage() {
    echo "USAGE: $PROG -u username -p passphrase -n num_nodes"
}

while getopts "hn:u:p:" OPTION; do
    case $OPTION in
        h)
            usage
            exit 0
            ;;
        n)
            num_nodes="$OPTARG"
            ;;
        u)
            user_name="$OPTARG"
            ;;
        p)
            pass_phrase="$OPTARG"
            ;;
    esac
done

# Argument Sanitation
re='^[0-9]+$'
if ! [[ $num_nodes =~ $re ]] ; then
    error "Invalid argument: please enter an integer after the -n flag"
fi

echo "Removing ~/mpihostsfile"
rm -f /home/$user_name/mpihostsfile
echo "Removing ~/.ssh/authorized_keys"
rm -f /home/$user_name/.ssh/authorized_keys

echo "Generating /home/$user_name/mpihostsfile"
echo "Generating /home/$user_name/.ssh/authorized_keys"
echo "Updating /etc/hosts"

sed -i '/10.0.0.*/d' /etc/hosts

echo -n "Setting up root SSH key... "
ssh-keygen -N '' -b 8192 -f /root/.ssh/id_rsa
echo "Done"

echo -n "Setting up SSH keys on nodes... you will need to enter the root password for each node to copy over the root SSH key"
for (( i=1; i<=$num_nodes; i++ )); do
    node_name="CompactCori$i"
    num=$(($i+100))
    ip=10.0.0..$num
    echo $ip >> /home/$user_name/mpihostsfile

    sh -c "echo \"$ip  CompactCori$i\" >> /etc/hosts"
    sshpass -p "$pass_phrase" scp -o StrictHostKeyChecking=no $user_name@$node_name:~/.ssh/id_rsa.pub tmp_key
    cat tmp_key >> /home/$user_name/.ssh/authorized_keys
done

for (( i=1; i<=$num_nodes; i++ )); do
    sshpass -p "$pass_phrase" scp -o StrictHostKeyChecking=no /home/$user_name/.ssh/authorized_keys $user_name@$node_name:~/.ssh/authorized_keys
    ssh-copy-id -i /root/id_rsa.pub root@$node_name
done

rm tmp_key

echo "Done"

echo -n "Hardening sshd config... "

# Ensure Public Key Auth is enabled
sed "s/PubkeyAuthentication*/PubkeyAuthentication no/" /etc/ssh/sshd_config

# Disallow root SSH logins
sed "s/PermitRootLogin*/PermitRootLogin no/" /etc/ssh/sshd_config

# Disallow keyboard-interactive logins
sed "s/PasswordAuthentication*/PasswordAuthentication no/" /etc/ssh/sshd_config

echo "Done"

echo -n "Setting up pdsh... "
rm -f /etc/profile.d/pdsh.sh
echo "export PDSH_RCMD_TYPE='ssh'" >> /etc/profile.d/pdsh.sh
echo "export WCOLL='/etc/pdsh/machines'" >> /etc/profile.d/pdsh.sh

rm -f /etc/pdsh/machines
for (( i=1; i<=$num_nodes; i||)); do
    echo "CompactCori$i" >> /etc/pdsh/machines
done

echo "Sleeping for 10 seconds and then rebooting: ^C to postpone reboot... "
sleep 10
shutdown -r now
